{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Copy of C8 Exercise",
      "version": "0.3.2",
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/bamboo0727/Neural-Network-Model/blob/master/Deploy%20Keras%20Model%20to%20Cloud\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "metadata": {
        "id": "putfXPMpF0jR",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "# Deploy Keras Model to the Cloud\n",
        "1. Download data\n",
        "2. Hot Encode Categorical Columns\n",
        "3. Develop Model (use: ```RMSprop(lr=, rho=, epsilon=, decay=)```)\n",
        "3. Create Storage Bucket (should already exist)\n",
        "4. Authenticate on Google Cloud Platform\n",
        "5. Deploy your model using the ```gcloud``` tool"
      ]
    },
    {
      "metadata": {
        "id": "zmrM3kybHDyd",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "### Download Data"
      ]
    },
    {
      "metadata": {
        "id": "8NDi_3HKF1HX",
        "colab_type": "code",
        "outputId": "08cf4a79-3750-45df-b164-c80baa5554c4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        }
      },
      "cell_type": "code",
      "source": [
        "!wget https://storage.googleapis.com/nicksdemobucket/bank.csv"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "--2019-04-27 03:15:43--  https://storage.googleapis.com/nicksdemobucket/bank.csv\n",
            "Resolving storage.googleapis.com (storage.googleapis.com)... 108.177.126.128, 2a00:1450:4013:c07::80\n",
            "Connecting to storage.googleapis.com (storage.googleapis.com)|108.177.126.128|:443... connected.\n",
            "HTTP request sent, awaiting response... 200 OK\n",
            "Length: 4610348 (4.4M) [application/octet-stream]\n",
            "Saving to: ‘bank.csv.4’\n",
            "\n",
            "\rbank.csv.4            0%[                    ]       0  --.-KB/s               \rbank.csv.4          100%[===================>]   4.40M  --.-KB/s    in 0.03s   \n",
            "\n",
            "2019-04-27 03:15:44 (135 MB/s) - ‘bank.csv.4’ saved [4610348/4610348]\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "zr6x0ZPu8pPl",
        "colab_type": "code",
        "outputId": "ef1ab47b-0174-43cf-a371-efbdb38b1727",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 669
        }
      },
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "df = pd.read_csv('bank.csv', sep=\";\")\n",
        "df.head(20)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>job</th>\n",
              "      <th>marital</th>\n",
              "      <th>education</th>\n",
              "      <th>default</th>\n",
              "      <th>balance</th>\n",
              "      <th>housing</th>\n",
              "      <th>loan</th>\n",
              "      <th>contact</th>\n",
              "      <th>day</th>\n",
              "      <th>month</th>\n",
              "      <th>duration</th>\n",
              "      <th>campaign</th>\n",
              "      <th>pdays</th>\n",
              "      <th>previous</th>\n",
              "      <th>poutcome</th>\n",
              "      <th>y</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>58</td>\n",
              "      <td>management</td>\n",
              "      <td>married</td>\n",
              "      <td>tertiary</td>\n",
              "      <td>no</td>\n",
              "      <td>2143</td>\n",
              "      <td>yes</td>\n",
              "      <td>no</td>\n",
              "      <td>unknown</td>\n",
              "      <td>5</td>\n",
              "      <td>may</td>\n",
              "      <td>261</td>\n",
              "      <td>1</td>\n",
              "      <td>-1</td>\n",
              "      <td>0</td>\n",
              "      <td>unknown</td>\n",
              "      <td>no</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>44</td>\n",
              "      <td>technician</td>\n",
              "      <td>single</td>\n",
              "      <td>secondary</td>\n",
              "      <td>no</td>\n",
              "      <td>29</td>\n",
              "      <td>yes</td>\n",
              "      <td>no</td>\n",
              "      <td>unknown</td>\n",
              "      <td>5</td>\n",
              "      <td>may</td>\n",
              "      <td>151</td>\n",
              "      <td>1</td>\n",
              "      <td>-1</td>\n",
              "      <td>0</td>\n",
              "      <td>unknown</td>\n",
              "      <td>no</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>33</td>\n",
              "      <td>entrepreneur</td>\n",
              "      <td>married</td>\n",
              "      <td>secondary</td>\n",
              "      <td>no</td>\n",
              "      <td>2</td>\n",
              "      <td>yes</td>\n",
              "      <td>yes</td>\n",
              "      <td>unknown</td>\n",
              "      <td>5</td>\n",
              "      <td>may</td>\n",
              "      <td>76</td>\n",
              "      <td>1</td>\n",
              "      <td>-1</td>\n",
              "      <td>0</td>\n",
              "      <td>unknown</td>\n",
              "      <td>no</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>47</td>\n",
              "      <td>blue-collar</td>\n",
              "      <td>married</td>\n",
              "      <td>unknown</td>\n",
              "      <td>no</td>\n",
              "      <td>1506</td>\n",
              "      <td>yes</td>\n",
              "      <td>no</td>\n",
              "      <td>unknown</td>\n",
              "      <td>5</td>\n",
              "      <td>may</td>\n",
              "      <td>92</td>\n",
              "      <td>1</td>\n",
              "      <td>-1</td>\n",
              "      <td>0</td>\n",
              "      <td>unknown</td>\n",
              "      <td>no</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>33</td>\n",
              "      <td>unknown</td>\n",
              "      <td>single</td>\n",
              "      <td>unknown</td>\n",
              "      <td>no</td>\n",
              "      <td>1</td>\n",
              "      <td>no</td>\n",
              "      <td>no</td>\n",
              "      <td>unknown</td>\n",
              "      <td>5</td>\n",
              "      <td>may</td>\n",
              "      <td>198</td>\n",
              "      <td>1</td>\n",
              "      <td>-1</td>\n",
              "      <td>0</td>\n",
              "      <td>unknown</td>\n",
              "      <td>no</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>35</td>\n",
              "      <td>management</td>\n",
              "      <td>married</td>\n",
              "      <td>tertiary</td>\n",
              "      <td>no</td>\n",
              "      <td>231</td>\n",
              "      <td>yes</td>\n",
              "      <td>no</td>\n",
              "      <td>unknown</td>\n",
              "      <td>5</td>\n",
              "      <td>may</td>\n",
              "      <td>139</td>\n",
              "      <td>1</td>\n",
              "      <td>-1</td>\n",
              "      <td>0</td>\n",
              "      <td>unknown</td>\n",
              "      <td>no</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>28</td>\n",
              "      <td>management</td>\n",
              "      <td>single</td>\n",
              "      <td>tertiary</td>\n",
              "      <td>no</td>\n",
              "      <td>447</td>\n",
              "      <td>yes</td>\n",
              "      <td>yes</td>\n",
              "      <td>unknown</td>\n",
              "      <td>5</td>\n",
              "      <td>may</td>\n",
              "      <td>217</td>\n",
              "      <td>1</td>\n",
              "      <td>-1</td>\n",
              "      <td>0</td>\n",
              "      <td>unknown</td>\n",
              "      <td>no</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>42</td>\n",
              "      <td>entrepreneur</td>\n",
              "      <td>divorced</td>\n",
              "      <td>tertiary</td>\n",
              "      <td>yes</td>\n",
              "      <td>2</td>\n",
              "      <td>yes</td>\n",
              "      <td>no</td>\n",
              "      <td>unknown</td>\n",
              "      <td>5</td>\n",
              "      <td>may</td>\n",
              "      <td>380</td>\n",
              "      <td>1</td>\n",
              "      <td>-1</td>\n",
              "      <td>0</td>\n",
              "      <td>unknown</td>\n",
              "      <td>no</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>58</td>\n",
              "      <td>retired</td>\n",
              "      <td>married</td>\n",
              "      <td>primary</td>\n",
              "      <td>no</td>\n",
              "      <td>121</td>\n",
              "      <td>yes</td>\n",
              "      <td>no</td>\n",
              "      <td>unknown</td>\n",
              "      <td>5</td>\n",
              "      <td>may</td>\n",
              "      <td>50</td>\n",
              "      <td>1</td>\n",
              "      <td>-1</td>\n",
              "      <td>0</td>\n",
              "      <td>unknown</td>\n",
              "      <td>no</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>43</td>\n",
              "      <td>technician</td>\n",
              "      <td>single</td>\n",
              "      <td>secondary</td>\n",
              "      <td>no</td>\n",
              "      <td>593</td>\n",
              "      <td>yes</td>\n",
              "      <td>no</td>\n",
              "      <td>unknown</td>\n",
              "      <td>5</td>\n",
              "      <td>may</td>\n",
              "      <td>55</td>\n",
              "      <td>1</td>\n",
              "      <td>-1</td>\n",
              "      <td>0</td>\n",
              "      <td>unknown</td>\n",
              "      <td>no</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>41</td>\n",
              "      <td>admin.</td>\n",
              "      <td>divorced</td>\n",
              "      <td>secondary</td>\n",
              "      <td>no</td>\n",
              "      <td>270</td>\n",
              "      <td>yes</td>\n",
              "      <td>no</td>\n",
              "      <td>unknown</td>\n",
              "      <td>5</td>\n",
              "      <td>may</td>\n",
              "      <td>222</td>\n",
              "      <td>1</td>\n",
              "      <td>-1</td>\n",
              "      <td>0</td>\n",
              "      <td>unknown</td>\n",
              "      <td>no</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>29</td>\n",
              "      <td>admin.</td>\n",
              "      <td>single</td>\n",
              "      <td>secondary</td>\n",
              "      <td>no</td>\n",
              "      <td>390</td>\n",
              "      <td>yes</td>\n",
              "      <td>no</td>\n",
              "      <td>unknown</td>\n",
              "      <td>5</td>\n",
              "      <td>may</td>\n",
              "      <td>137</td>\n",
              "      <td>1</td>\n",
              "      <td>-1</td>\n",
              "      <td>0</td>\n",
              "      <td>unknown</td>\n",
              "      <td>no</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>53</td>\n",
              "      <td>technician</td>\n",
              "      <td>married</td>\n",
              "      <td>secondary</td>\n",
              "      <td>no</td>\n",
              "      <td>6</td>\n",
              "      <td>yes</td>\n",
              "      <td>no</td>\n",
              "      <td>unknown</td>\n",
              "      <td>5</td>\n",
              "      <td>may</td>\n",
              "      <td>517</td>\n",
              "      <td>1</td>\n",
              "      <td>-1</td>\n",
              "      <td>0</td>\n",
              "      <td>unknown</td>\n",
              "      <td>no</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>58</td>\n",
              "      <td>technician</td>\n",
              "      <td>married</td>\n",
              "      <td>unknown</td>\n",
              "      <td>no</td>\n",
              "      <td>71</td>\n",
              "      <td>yes</td>\n",
              "      <td>no</td>\n",
              "      <td>unknown</td>\n",
              "      <td>5</td>\n",
              "      <td>may</td>\n",
              "      <td>71</td>\n",
              "      <td>1</td>\n",
              "      <td>-1</td>\n",
              "      <td>0</td>\n",
              "      <td>unknown</td>\n",
              "      <td>no</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>57</td>\n",
              "      <td>services</td>\n",
              "      <td>married</td>\n",
              "      <td>secondary</td>\n",
              "      <td>no</td>\n",
              "      <td>162</td>\n",
              "      <td>yes</td>\n",
              "      <td>no</td>\n",
              "      <td>unknown</td>\n",
              "      <td>5</td>\n",
              "      <td>may</td>\n",
              "      <td>174</td>\n",
              "      <td>1</td>\n",
              "      <td>-1</td>\n",
              "      <td>0</td>\n",
              "      <td>unknown</td>\n",
              "      <td>no</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>51</td>\n",
              "      <td>retired</td>\n",
              "      <td>married</td>\n",
              "      <td>primary</td>\n",
              "      <td>no</td>\n",
              "      <td>229</td>\n",
              "      <td>yes</td>\n",
              "      <td>no</td>\n",
              "      <td>unknown</td>\n",
              "      <td>5</td>\n",
              "      <td>may</td>\n",
              "      <td>353</td>\n",
              "      <td>1</td>\n",
              "      <td>-1</td>\n",
              "      <td>0</td>\n",
              "      <td>unknown</td>\n",
              "      <td>no</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>45</td>\n",
              "      <td>admin.</td>\n",
              "      <td>single</td>\n",
              "      <td>unknown</td>\n",
              "      <td>no</td>\n",
              "      <td>13</td>\n",
              "      <td>yes</td>\n",
              "      <td>no</td>\n",
              "      <td>unknown</td>\n",
              "      <td>5</td>\n",
              "      <td>may</td>\n",
              "      <td>98</td>\n",
              "      <td>1</td>\n",
              "      <td>-1</td>\n",
              "      <td>0</td>\n",
              "      <td>unknown</td>\n",
              "      <td>no</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>57</td>\n",
              "      <td>blue-collar</td>\n",
              "      <td>married</td>\n",
              "      <td>primary</td>\n",
              "      <td>no</td>\n",
              "      <td>52</td>\n",
              "      <td>yes</td>\n",
              "      <td>no</td>\n",
              "      <td>unknown</td>\n",
              "      <td>5</td>\n",
              "      <td>may</td>\n",
              "      <td>38</td>\n",
              "      <td>1</td>\n",
              "      <td>-1</td>\n",
              "      <td>0</td>\n",
              "      <td>unknown</td>\n",
              "      <td>no</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>60</td>\n",
              "      <td>retired</td>\n",
              "      <td>married</td>\n",
              "      <td>primary</td>\n",
              "      <td>no</td>\n",
              "      <td>60</td>\n",
              "      <td>yes</td>\n",
              "      <td>no</td>\n",
              "      <td>unknown</td>\n",
              "      <td>5</td>\n",
              "      <td>may</td>\n",
              "      <td>219</td>\n",
              "      <td>1</td>\n",
              "      <td>-1</td>\n",
              "      <td>0</td>\n",
              "      <td>unknown</td>\n",
              "      <td>no</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>33</td>\n",
              "      <td>services</td>\n",
              "      <td>married</td>\n",
              "      <td>secondary</td>\n",
              "      <td>no</td>\n",
              "      <td>0</td>\n",
              "      <td>yes</td>\n",
              "      <td>no</td>\n",
              "      <td>unknown</td>\n",
              "      <td>5</td>\n",
              "      <td>may</td>\n",
              "      <td>54</td>\n",
              "      <td>1</td>\n",
              "      <td>-1</td>\n",
              "      <td>0</td>\n",
              "      <td>unknown</td>\n",
              "      <td>no</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "    age           job   marital  education default  balance housing loan  \\\n",
              "0    58    management   married   tertiary      no     2143     yes   no   \n",
              "1    44    technician    single  secondary      no       29     yes   no   \n",
              "2    33  entrepreneur   married  secondary      no        2     yes  yes   \n",
              "3    47   blue-collar   married    unknown      no     1506     yes   no   \n",
              "4    33       unknown    single    unknown      no        1      no   no   \n",
              "5    35    management   married   tertiary      no      231     yes   no   \n",
              "6    28    management    single   tertiary      no      447     yes  yes   \n",
              "7    42  entrepreneur  divorced   tertiary     yes        2     yes   no   \n",
              "8    58       retired   married    primary      no      121     yes   no   \n",
              "9    43    technician    single  secondary      no      593     yes   no   \n",
              "10   41        admin.  divorced  secondary      no      270     yes   no   \n",
              "11   29        admin.    single  secondary      no      390     yes   no   \n",
              "12   53    technician   married  secondary      no        6     yes   no   \n",
              "13   58    technician   married    unknown      no       71     yes   no   \n",
              "14   57      services   married  secondary      no      162     yes   no   \n",
              "15   51       retired   married    primary      no      229     yes   no   \n",
              "16   45        admin.    single    unknown      no       13     yes   no   \n",
              "17   57   blue-collar   married    primary      no       52     yes   no   \n",
              "18   60       retired   married    primary      no       60     yes   no   \n",
              "19   33      services   married  secondary      no        0     yes   no   \n",
              "\n",
              "    contact  day month  duration  campaign  pdays  previous poutcome   y  \n",
              "0   unknown    5   may       261         1     -1         0  unknown  no  \n",
              "1   unknown    5   may       151         1     -1         0  unknown  no  \n",
              "2   unknown    5   may        76         1     -1         0  unknown  no  \n",
              "3   unknown    5   may        92         1     -1         0  unknown  no  \n",
              "4   unknown    5   may       198         1     -1         0  unknown  no  \n",
              "5   unknown    5   may       139         1     -1         0  unknown  no  \n",
              "6   unknown    5   may       217         1     -1         0  unknown  no  \n",
              "7   unknown    5   may       380         1     -1         0  unknown  no  \n",
              "8   unknown    5   may        50         1     -1         0  unknown  no  \n",
              "9   unknown    5   may        55         1     -1         0  unknown  no  \n",
              "10  unknown    5   may       222         1     -1         0  unknown  no  \n",
              "11  unknown    5   may       137         1     -1         0  unknown  no  \n",
              "12  unknown    5   may       517         1     -1         0  unknown  no  \n",
              "13  unknown    5   may        71         1     -1         0  unknown  no  \n",
              "14  unknown    5   may       174         1     -1         0  unknown  no  \n",
              "15  unknown    5   may       353         1     -1         0  unknown  no  \n",
              "16  unknown    5   may        98         1     -1         0  unknown  no  \n",
              "17  unknown    5   may        38         1     -1         0  unknown  no  \n",
              "18  unknown    5   may       219         1     -1         0  unknown  no  \n",
              "19  unknown    5   may        54         1     -1         0  unknown  no  "
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 2
        }
      ]
    },
    {
      "metadata": {
        "id": "gaP2-jzTDtrL",
        "colab_type": "code",
        "outputId": "6c62675e-40db-4dad-f819-412ee87e5bef",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        }
      },
      "cell_type": "code",
      "source": [
        "df.describe()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>balance</th>\n",
              "      <th>day</th>\n",
              "      <th>duration</th>\n",
              "      <th>campaign</th>\n",
              "      <th>pdays</th>\n",
              "      <th>previous</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>45211.000000</td>\n",
              "      <td>45211.000000</td>\n",
              "      <td>45211.000000</td>\n",
              "      <td>45211.000000</td>\n",
              "      <td>45211.000000</td>\n",
              "      <td>45211.000000</td>\n",
              "      <td>45211.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>40.936210</td>\n",
              "      <td>1362.272058</td>\n",
              "      <td>15.806419</td>\n",
              "      <td>258.163080</td>\n",
              "      <td>2.763841</td>\n",
              "      <td>40.197828</td>\n",
              "      <td>0.580323</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>10.618762</td>\n",
              "      <td>3044.765829</td>\n",
              "      <td>8.322476</td>\n",
              "      <td>257.527812</td>\n",
              "      <td>3.098021</td>\n",
              "      <td>100.128746</td>\n",
              "      <td>2.303441</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>18.000000</td>\n",
              "      <td>-8019.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>33.000000</td>\n",
              "      <td>72.000000</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>103.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>39.000000</td>\n",
              "      <td>448.000000</td>\n",
              "      <td>16.000000</td>\n",
              "      <td>180.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>-1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>48.000000</td>\n",
              "      <td>1428.000000</td>\n",
              "      <td>21.000000</td>\n",
              "      <td>319.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>-1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>95.000000</td>\n",
              "      <td>102127.000000</td>\n",
              "      <td>31.000000</td>\n",
              "      <td>4918.000000</td>\n",
              "      <td>63.000000</td>\n",
              "      <td>871.000000</td>\n",
              "      <td>275.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                age        balance           day      duration      campaign  \\\n",
              "count  45211.000000   45211.000000  45211.000000  45211.000000  45211.000000   \n",
              "mean      40.936210    1362.272058     15.806419    258.163080      2.763841   \n",
              "std       10.618762    3044.765829      8.322476    257.527812      3.098021   \n",
              "min       18.000000   -8019.000000      1.000000      0.000000      1.000000   \n",
              "25%       33.000000      72.000000      8.000000    103.000000      1.000000   \n",
              "50%       39.000000     448.000000     16.000000    180.000000      2.000000   \n",
              "75%       48.000000    1428.000000     21.000000    319.000000      3.000000   \n",
              "max       95.000000  102127.000000     31.000000   4918.000000     63.000000   \n",
              "\n",
              "              pdays      previous  \n",
              "count  45211.000000  45211.000000  \n",
              "mean      40.197828      0.580323  \n",
              "std      100.128746      2.303441  \n",
              "min       -1.000000      0.000000  \n",
              "25%       -1.000000      0.000000  \n",
              "50%       -1.000000      0.000000  \n",
              "75%       -1.000000      0.000000  \n",
              "max      871.000000    275.000000  "
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 3
        }
      ]
    },
    {
      "metadata": {
        "id": "RewodRHUHGjx",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "### Hot Encode Categorical Columns"
      ]
    },
    {
      "metadata": {
        "id": "fnb1qpaxFDOW",
        "colab_type": "code",
        "outputId": "74154646-7164-4151-efc0-bbd573ef8505",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        }
      },
      "cell_type": "code",
      "source": [
        "df.loc[df['y'] == 'no', 'y'] = 0\n",
        "df.loc[df['y'] == 'yes', 'y'] = 1\n",
        "df.head()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>job</th>\n",
              "      <th>marital</th>\n",
              "      <th>education</th>\n",
              "      <th>default</th>\n",
              "      <th>balance</th>\n",
              "      <th>housing</th>\n",
              "      <th>loan</th>\n",
              "      <th>contact</th>\n",
              "      <th>day</th>\n",
              "      <th>month</th>\n",
              "      <th>duration</th>\n",
              "      <th>campaign</th>\n",
              "      <th>pdays</th>\n",
              "      <th>previous</th>\n",
              "      <th>poutcome</th>\n",
              "      <th>y</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>58</td>\n",
              "      <td>management</td>\n",
              "      <td>married</td>\n",
              "      <td>tertiary</td>\n",
              "      <td>no</td>\n",
              "      <td>2143</td>\n",
              "      <td>yes</td>\n",
              "      <td>no</td>\n",
              "      <td>unknown</td>\n",
              "      <td>5</td>\n",
              "      <td>may</td>\n",
              "      <td>261</td>\n",
              "      <td>1</td>\n",
              "      <td>-1</td>\n",
              "      <td>0</td>\n",
              "      <td>unknown</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>44</td>\n",
              "      <td>technician</td>\n",
              "      <td>single</td>\n",
              "      <td>secondary</td>\n",
              "      <td>no</td>\n",
              "      <td>29</td>\n",
              "      <td>yes</td>\n",
              "      <td>no</td>\n",
              "      <td>unknown</td>\n",
              "      <td>5</td>\n",
              "      <td>may</td>\n",
              "      <td>151</td>\n",
              "      <td>1</td>\n",
              "      <td>-1</td>\n",
              "      <td>0</td>\n",
              "      <td>unknown</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>33</td>\n",
              "      <td>entrepreneur</td>\n",
              "      <td>married</td>\n",
              "      <td>secondary</td>\n",
              "      <td>no</td>\n",
              "      <td>2</td>\n",
              "      <td>yes</td>\n",
              "      <td>yes</td>\n",
              "      <td>unknown</td>\n",
              "      <td>5</td>\n",
              "      <td>may</td>\n",
              "      <td>76</td>\n",
              "      <td>1</td>\n",
              "      <td>-1</td>\n",
              "      <td>0</td>\n",
              "      <td>unknown</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>47</td>\n",
              "      <td>blue-collar</td>\n",
              "      <td>married</td>\n",
              "      <td>unknown</td>\n",
              "      <td>no</td>\n",
              "      <td>1506</td>\n",
              "      <td>yes</td>\n",
              "      <td>no</td>\n",
              "      <td>unknown</td>\n",
              "      <td>5</td>\n",
              "      <td>may</td>\n",
              "      <td>92</td>\n",
              "      <td>1</td>\n",
              "      <td>-1</td>\n",
              "      <td>0</td>\n",
              "      <td>unknown</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>33</td>\n",
              "      <td>unknown</td>\n",
              "      <td>single</td>\n",
              "      <td>unknown</td>\n",
              "      <td>no</td>\n",
              "      <td>1</td>\n",
              "      <td>no</td>\n",
              "      <td>no</td>\n",
              "      <td>unknown</td>\n",
              "      <td>5</td>\n",
              "      <td>may</td>\n",
              "      <td>198</td>\n",
              "      <td>1</td>\n",
              "      <td>-1</td>\n",
              "      <td>0</td>\n",
              "      <td>unknown</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   age           job  marital  education default  balance housing loan  \\\n",
              "0   58    management  married   tertiary      no     2143     yes   no   \n",
              "1   44    technician   single  secondary      no       29     yes   no   \n",
              "2   33  entrepreneur  married  secondary      no        2     yes  yes   \n",
              "3   47   blue-collar  married    unknown      no     1506     yes   no   \n",
              "4   33       unknown   single    unknown      no        1      no   no   \n",
              "\n",
              "   contact  day month  duration  campaign  pdays  previous poutcome  y  \n",
              "0  unknown    5   may       261         1     -1         0  unknown  0  \n",
              "1  unknown    5   may       151         1     -1         0  unknown  0  \n",
              "2  unknown    5   may        76         1     -1         0  unknown  0  \n",
              "3  unknown    5   may        92         1     -1         0  unknown  0  \n",
              "4  unknown    5   may       198         1     -1         0  unknown  0  "
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 4
        }
      ]
    },
    {
      "metadata": {
        "id": "0FgX6Gk8EAZ3",
        "colab_type": "code",
        "outputId": "fbf7f7eb-a85b-4d8d-f169-85c7ce2bef42",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 68
        }
      },
      "cell_type": "code",
      "source": [
        "# Get all categorical columns\n",
        "categorical = df.select_dtypes(include='object').columns\n",
        "print(categorical)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Index(['job', 'marital', 'education', 'default', 'housing', 'loan', 'contact',\n",
            "       'month', 'poutcome'],\n",
            "      dtype='object')\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "Mxu-8ZFsAmUc",
        "colab_type": "code",
        "outputId": "dfff60b7-d0b7-4398-d9bc-72c4b0cfe3ad",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 270
        }
      },
      "cell_type": "code",
      "source": [
        "# Hot encode all categorical columns\n",
        "for i in categorical:\n",
        "  new_cols = pd.get_dummies(df[i], prefix=i)\n",
        "  df = df.drop(i, axis=1)\n",
        "  df = df.join(new_cols)\n",
        "  \n",
        "df.head()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>balance</th>\n",
              "      <th>day</th>\n",
              "      <th>duration</th>\n",
              "      <th>campaign</th>\n",
              "      <th>pdays</th>\n",
              "      <th>previous</th>\n",
              "      <th>y</th>\n",
              "      <th>job_admin.</th>\n",
              "      <th>job_blue-collar</th>\n",
              "      <th>...</th>\n",
              "      <th>month_jun</th>\n",
              "      <th>month_mar</th>\n",
              "      <th>month_may</th>\n",
              "      <th>month_nov</th>\n",
              "      <th>month_oct</th>\n",
              "      <th>month_sep</th>\n",
              "      <th>poutcome_failure</th>\n",
              "      <th>poutcome_other</th>\n",
              "      <th>poutcome_success</th>\n",
              "      <th>poutcome_unknown</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>58</td>\n",
              "      <td>2143</td>\n",
              "      <td>5</td>\n",
              "      <td>261</td>\n",
              "      <td>1</td>\n",
              "      <td>-1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>44</td>\n",
              "      <td>29</td>\n",
              "      <td>5</td>\n",
              "      <td>151</td>\n",
              "      <td>1</td>\n",
              "      <td>-1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>33</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>76</td>\n",
              "      <td>1</td>\n",
              "      <td>-1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>47</td>\n",
              "      <td>1506</td>\n",
              "      <td>5</td>\n",
              "      <td>92</td>\n",
              "      <td>1</td>\n",
              "      <td>-1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>33</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>198</td>\n",
              "      <td>1</td>\n",
              "      <td>-1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 52 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "   age  balance  day  duration  campaign  pdays  previous  y  job_admin.  \\\n",
              "0   58     2143    5       261         1     -1         0  0           0   \n",
              "1   44       29    5       151         1     -1         0  0           0   \n",
              "2   33        2    5        76         1     -1         0  0           0   \n",
              "3   47     1506    5        92         1     -1         0  0           0   \n",
              "4   33        1    5       198         1     -1         0  0           0   \n",
              "\n",
              "   job_blue-collar  ...  month_jun  month_mar  month_may  month_nov  \\\n",
              "0                0  ...          0          0          1          0   \n",
              "1                0  ...          0          0          1          0   \n",
              "2                0  ...          0          0          1          0   \n",
              "3                1  ...          0          0          1          0   \n",
              "4                0  ...          0          0          1          0   \n",
              "\n",
              "   month_oct  month_sep  poutcome_failure  poutcome_other  poutcome_success  \\\n",
              "0          0          0                 0               0                 0   \n",
              "1          0          0                 0               0                 0   \n",
              "2          0          0                 0               0                 0   \n",
              "3          0          0                 0               0                 0   \n",
              "4          0          0                 0               0                 0   \n",
              "\n",
              "   poutcome_unknown  \n",
              "0                 1  \n",
              "1                 1  \n",
              "2                 1  \n",
              "3                 1  \n",
              "4                 1  \n",
              "\n",
              "[5 rows x 52 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 6
        }
      ]
    },
    {
      "metadata": {
        "id": "TLE-YdGKJMbL",
        "colab_type": "code",
        "outputId": "3eeb3484-010c-4a31-ac36-4928c5da8b16",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 122
        }
      },
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn import preprocessing\n",
        "min_max_scaler = preprocessing.MinMaxScaler()\n",
        "\n",
        "train, test = train_test_split(df, test_size=0.1)\n",
        "\n",
        "X_train = min_max_scaler.fit_transform(train.drop(['y'], axis=1))\n",
        "y_train = train[['y']].values\n",
        "\n",
        "X_test = min_max_scaler.fit_transform(test.drop(['y'], axis=1))\n",
        "y_test = test[['y']].values\n",
        "\n",
        "X_train.shape, y_train.shape, X_test.shape, y_test.shape"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/data.py:334: DataConversionWarning: Data with input dtype uint8, int64 were all converted to float64 by MinMaxScaler.\n",
            "  return self.partial_fit(X, y)\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/data.py:334: DataConversionWarning: Data with input dtype uint8, int64 were all converted to float64 by MinMaxScaler.\n",
            "  return self.partial_fit(X, y)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((40689, 51), (40689, 1), (4522, 51), (4522, 1))"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 7
        }
      ]
    },
    {
      "metadata": {
        "id": "fZHgH04CHNiV",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "### Develop Model\n",
        "* Use ```RMSprop(lr=, rho=, epsilon=, decay=)```\n",
        "* Plot accuracy and loss over time"
      ]
    },
    {
      "metadata": {
        "id": "4TaT51LMD2YH",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense, BatchNormalization, Dropout\n",
        "from tensorflow.train import RMSPropOptimizer\n",
        "from tensorflow import keras\n",
        "import tensorflow as tf"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "56v5Mvj-JQ9Y",
        "colab_type": "code",
        "outputId": "a96fd892-95f6-4f43-c9fe-c7aa19513953",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 190
        }
      },
      "cell_type": "code",
      "source": [
        "model = Sequential()\n",
        "\n",
        "model.add(Dense(10, input_shape=(51,), activation='relu'))\n",
        "model.add(Dropout(0.3))\n",
        "model.add(BatchNormalization())\n",
        "\n",
        "model.add(Dense(1,activation='sigmoid'))\n",
        "model.compile(loss='mean_squared_error',\n",
        "                optimizer = tf.keras.optimizers.RMSprop(lr=0.001, rho=0.9, epsilon=1e-08, decay=0.0),\n",
        "                metrics=['accuracy'])\n",
        "\n",
        "\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/resource_variable_ops.py:435: colocate_with (from tensorflow.python.framework.ops) is deprecated and will be removed in a future version.\n",
            "Instructions for updating:\n",
            "Colocations handled automatically by placer.\n",
            "WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/layers/core.py:143: calling dropout (from tensorflow.python.ops.nn_ops) with keep_prob is deprecated and will be removed in a future version.\n",
            "Instructions for updating:\n",
            "Please use `rate` instead of `keep_prob`. Rate should be set to `rate = 1 - keep_prob`.\n",
            "WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/utils/losses_utils.py:170: to_float (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.\n",
            "Instructions for updating:\n",
            "Use tf.cast instead.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "BAjPUIgM8oyV",
        "colab_type": "code",
        "outputId": "2bc6300c-4051-4016-a7d5-1d1bac8ad335",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 3488
        }
      },
      "cell_type": "code",
      "source": [
        "h = model.fit(X_train, y_train, \n",
        "              epochs=100,\n",
        "              batch_size=4,\n",
        "              steps_per_epoch=int(100/4), \n",
        "              validation_split=0.2, \n",
        "              )"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/math_ops.py:3066: to_int32 (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.\n",
            "Instructions for updating:\n",
            "Use tf.cast instead.\n",
            "Epoch 1/100\n",
            "25/25 [==============================] - 3s 127ms/step - loss: 0.2709 - acc: 0.5712 - val_loss: 0.2204 - val_acc: 0.7738\n",
            "Epoch 2/100\n",
            "25/25 [==============================] - 3s 104ms/step - loss: 0.2285 - acc: 0.6999 - val_loss: 0.2021 - val_acc: 0.8613\n",
            "Epoch 3/100\n",
            "25/25 [==============================] - 3s 116ms/step - loss: 0.1965 - acc: 0.7943 - val_loss: 0.1842 - val_acc: 0.8817\n",
            "Epoch 4/100\n",
            "25/25 [==============================] - 3s 123ms/step - loss: 0.1716 - acc: 0.8419 - val_loss: 0.1638 - val_acc: 0.8862\n",
            "Epoch 5/100\n",
            "25/25 [==============================] - 3s 120ms/step - loss: 0.1509 - acc: 0.8630 - val_loss: 0.1451 - val_acc: 0.8881\n",
            "Epoch 6/100\n",
            "25/25 [==============================] - 3s 115ms/step - loss: 0.1333 - acc: 0.8760 - val_loss: 0.1289 - val_acc: 0.8882\n",
            "Epoch 7/100\n",
            "25/25 [==============================] - 3s 105ms/step - loss: 0.1193 - acc: 0.8820 - val_loss: 0.1161 - val_acc: 0.8885\n",
            "Epoch 8/100\n",
            "25/25 [==============================] - 3s 108ms/step - loss: 0.1083 - acc: 0.8861 - val_loss: 0.1067 - val_acc: 0.8900\n",
            "Epoch 9/100\n",
            "25/25 [==============================] - 3s 106ms/step - loss: 0.1001 - acc: 0.8891 - val_loss: 0.0997 - val_acc: 0.8895\n",
            "Epoch 10/100\n",
            "25/25 [==============================] - 3s 105ms/step - loss: 0.0942 - acc: 0.8911 - val_loss: 0.0952 - val_acc: 0.8905\n",
            "Epoch 11/100\n",
            "25/25 [==============================] - 3s 106ms/step - loss: 0.0902 - acc: 0.8926 - val_loss: 0.0923 - val_acc: 0.8909\n",
            "Epoch 12/100\n",
            "25/25 [==============================] - 3s 106ms/step - loss: 0.0879 - acc: 0.8933 - val_loss: 0.0907 - val_acc: 0.8909\n",
            "Epoch 13/100\n",
            "25/25 [==============================] - 3s 106ms/step - loss: 0.0862 - acc: 0.8942 - val_loss: 0.0897 - val_acc: 0.8898\n",
            "Epoch 14/100\n",
            "25/25 [==============================] - 3s 105ms/step - loss: 0.0848 - acc: 0.8945 - val_loss: 0.0894 - val_acc: 0.8900\n",
            "Epoch 15/100\n",
            "25/25 [==============================] - 3s 106ms/step - loss: 0.0834 - acc: 0.8948 - val_loss: 0.0885 - val_acc: 0.8903\n",
            "Epoch 16/100\n",
            "25/25 [==============================] - 3s 105ms/step - loss: 0.0818 - acc: 0.8957 - val_loss: 0.0882 - val_acc: 0.8903\n",
            "Epoch 17/100\n",
            "25/25 [==============================] - 3s 105ms/step - loss: 0.0801 - acc: 0.8974 - val_loss: 0.0873 - val_acc: 0.8904\n",
            "Epoch 18/100\n",
            "25/25 [==============================] - 3s 122ms/step - loss: 0.0785 - acc: 0.8986 - val_loss: 0.0866 - val_acc: 0.8905\n",
            "Epoch 19/100\n",
            "25/25 [==============================] - 3s 128ms/step - loss: 0.0770 - acc: 0.8995 - val_loss: 0.0859 - val_acc: 0.8908\n",
            "Epoch 20/100\n",
            "25/25 [==============================] - 3s 128ms/step - loss: 0.0759 - acc: 0.9006 - val_loss: 0.0843 - val_acc: 0.8915\n",
            "Epoch 21/100\n",
            "25/25 [==============================] - 3s 117ms/step - loss: 0.0752 - acc: 0.9016 - val_loss: 0.0824 - val_acc: 0.8921\n",
            "Epoch 22/100\n",
            "25/25 [==============================] - 3s 107ms/step - loss: 0.0745 - acc: 0.9024 - val_loss: 0.0818 - val_acc: 0.8922\n",
            "Epoch 23/100\n",
            "25/25 [==============================] - 3s 106ms/step - loss: 0.0741 - acc: 0.9028 - val_loss: 0.0797 - val_acc: 0.8927\n",
            "Epoch 24/100\n",
            "25/25 [==============================] - 3s 105ms/step - loss: 0.0739 - acc: 0.9031 - val_loss: 0.0797 - val_acc: 0.8931\n",
            "Epoch 25/100\n",
            "25/25 [==============================] - 3s 106ms/step - loss: 0.0737 - acc: 0.9032 - val_loss: 0.0788 - val_acc: 0.8932\n",
            "Epoch 26/100\n",
            "25/25 [==============================] - 3s 105ms/step - loss: 0.0735 - acc: 0.9035 - val_loss: 0.0770 - val_acc: 0.8958\n",
            "Epoch 27/100\n",
            "25/25 [==============================] - 3s 106ms/step - loss: 0.0732 - acc: 0.9037 - val_loss: 0.0770 - val_acc: 0.8963\n",
            "Epoch 28/100\n",
            "25/25 [==============================] - 3s 107ms/step - loss: 0.0733 - acc: 0.9037 - val_loss: 0.0753 - val_acc: 0.8974\n",
            "Epoch 29/100\n",
            "25/25 [==============================] - 3s 105ms/step - loss: 0.0731 - acc: 0.9039 - val_loss: 0.0753 - val_acc: 0.8983\n",
            "Epoch 30/100\n",
            "25/25 [==============================] - 3s 107ms/step - loss: 0.0730 - acc: 0.9039 - val_loss: 0.0754 - val_acc: 0.8981\n",
            "Epoch 31/100\n",
            "25/25 [==============================] - 3s 104ms/step - loss: 0.0729 - acc: 0.9035 - val_loss: 0.0742 - val_acc: 0.8990\n",
            "Epoch 32/100\n",
            "25/25 [==============================] - 3s 111ms/step - loss: 0.0728 - acc: 0.9038 - val_loss: 0.0748 - val_acc: 0.8980\n",
            "Epoch 33/100\n",
            "25/25 [==============================] - 3s 119ms/step - loss: 0.0726 - acc: 0.9039 - val_loss: 0.0742 - val_acc: 0.8984\n",
            "Epoch 34/100\n",
            "25/25 [==============================] - 3s 121ms/step - loss: 0.0726 - acc: 0.9038 - val_loss: 0.0733 - val_acc: 0.8995\n",
            "Epoch 35/100\n",
            "25/25 [==============================] - 3s 117ms/step - loss: 0.0725 - acc: 0.9039 - val_loss: 0.0737 - val_acc: 0.8994\n",
            "Epoch 36/100\n",
            "25/25 [==============================] - 3s 104ms/step - loss: 0.0724 - acc: 0.9040 - val_loss: 0.0729 - val_acc: 0.8995\n",
            "Epoch 37/100\n",
            "25/25 [==============================] - 3s 105ms/step - loss: 0.0723 - acc: 0.9039 - val_loss: 0.0735 - val_acc: 0.8994\n",
            "Epoch 38/100\n",
            "25/25 [==============================] - 3s 106ms/step - loss: 0.0723 - acc: 0.9037 - val_loss: 0.0731 - val_acc: 0.9000\n",
            "Epoch 39/100\n",
            "25/25 [==============================] - 3s 105ms/step - loss: 0.0721 - acc: 0.9039 - val_loss: 0.0727 - val_acc: 0.9000\n",
            "Epoch 40/100\n",
            "25/25 [==============================] - 3s 105ms/step - loss: 0.0722 - acc: 0.9038 - val_loss: 0.0730 - val_acc: 0.8996\n",
            "Epoch 41/100\n",
            "25/25 [==============================] - 3s 104ms/step - loss: 0.0721 - acc: 0.9041 - val_loss: 0.0731 - val_acc: 0.8995\n",
            "Epoch 42/100\n",
            "25/25 [==============================] - 3s 107ms/step - loss: 0.0721 - acc: 0.9037 - val_loss: 0.0729 - val_acc: 0.9000\n",
            "Epoch 43/100\n",
            "25/25 [==============================] - 3s 104ms/step - loss: 0.0721 - acc: 0.9038 - val_loss: 0.0728 - val_acc: 0.8997\n",
            "Epoch 44/100\n",
            "25/25 [==============================] - 3s 115ms/step - loss: 0.0720 - acc: 0.9038 - val_loss: 0.0727 - val_acc: 0.8994\n",
            "Epoch 45/100\n",
            "25/25 [==============================] - 3s 124ms/step - loss: 0.0720 - acc: 0.9039 - val_loss: 0.0734 - val_acc: 0.8997\n",
            "Epoch 46/100\n",
            "25/25 [==============================] - 3s 107ms/step - loss: 0.0720 - acc: 0.9036 - val_loss: 0.0734 - val_acc: 0.8991\n",
            "Epoch 47/100\n",
            "25/25 [==============================] - 3s 104ms/step - loss: 0.0719 - acc: 0.9041 - val_loss: 0.0730 - val_acc: 0.8996\n",
            "Epoch 48/100\n",
            "25/25 [==============================] - 3s 105ms/step - loss: 0.0719 - acc: 0.9040 - val_loss: 0.0729 - val_acc: 0.8997\n",
            "Epoch 49/100\n",
            "25/25 [==============================] - 3s 107ms/step - loss: 0.0720 - acc: 0.9037 - val_loss: 0.0727 - val_acc: 0.9016\n",
            "Epoch 50/100\n",
            "25/25 [==============================] - 3s 105ms/step - loss: 0.0719 - acc: 0.9039 - val_loss: 0.0728 - val_acc: 0.9001\n",
            "Epoch 51/100\n",
            "25/25 [==============================] - 3s 105ms/step - loss: 0.0721 - acc: 0.9038 - val_loss: 0.0727 - val_acc: 0.9001\n",
            "Epoch 52/100\n",
            "25/25 [==============================] - 3s 105ms/step - loss: 0.0721 - acc: 0.9036 - val_loss: 0.0732 - val_acc: 0.8992\n",
            "Epoch 53/100\n",
            "25/25 [==============================] - 3s 108ms/step - loss: 0.0719 - acc: 0.9038 - val_loss: 0.0725 - val_acc: 0.9007\n",
            "Epoch 54/100\n",
            "25/25 [==============================] - 3s 105ms/step - loss: 0.0718 - acc: 0.9038 - val_loss: 0.0732 - val_acc: 0.9003\n",
            "Epoch 55/100\n",
            "25/25 [==============================] - 3s 105ms/step - loss: 0.0719 - acc: 0.9038 - val_loss: 0.0727 - val_acc: 0.8994\n",
            "Epoch 56/100\n",
            "25/25 [==============================] - 3s 105ms/step - loss: 0.0719 - acc: 0.9040 - val_loss: 0.0730 - val_acc: 0.9002\n",
            "Epoch 57/100\n",
            "25/25 [==============================] - 3s 105ms/step - loss: 0.0717 - acc: 0.9042 - val_loss: 0.0731 - val_acc: 0.9000\n",
            "Epoch 58/100\n",
            "25/25 [==============================] - 3s 105ms/step - loss: 0.0718 - acc: 0.9041 - val_loss: 0.0726 - val_acc: 0.9007\n",
            "Epoch 59/100\n",
            "25/25 [==============================] - 3s 104ms/step - loss: 0.0717 - acc: 0.9044 - val_loss: 0.0727 - val_acc: 0.9007\n",
            "Epoch 60/100\n",
            "25/25 [==============================] - 3s 105ms/step - loss: 0.0717 - acc: 0.9044 - val_loss: 0.0725 - val_acc: 0.9005\n",
            "Epoch 61/100\n",
            "25/25 [==============================] - 3s 105ms/step - loss: 0.0717 - acc: 0.9043 - val_loss: 0.0727 - val_acc: 0.9003\n",
            "Epoch 62/100\n",
            "25/25 [==============================] - 3s 114ms/step - loss: 0.0718 - acc: 0.9042 - val_loss: 0.0726 - val_acc: 0.9011\n",
            "Epoch 63/100\n",
            "25/25 [==============================] - 3s 119ms/step - loss: 0.0717 - acc: 0.9043 - val_loss: 0.0727 - val_acc: 0.9003\n",
            "Epoch 64/100\n",
            "25/25 [==============================] - 3s 120ms/step - loss: 0.0718 - acc: 0.9042 - val_loss: 0.0733 - val_acc: 0.8999\n",
            "Epoch 65/100\n",
            "25/25 [==============================] - 3s 115ms/step - loss: 0.0715 - acc: 0.9045 - val_loss: 0.0724 - val_acc: 0.9011\n",
            "Epoch 66/100\n",
            "25/25 [==============================] - 3s 106ms/step - loss: 0.0716 - acc: 0.9046 - val_loss: 0.0725 - val_acc: 0.9010\n",
            "Epoch 67/100\n",
            "25/25 [==============================] - 3s 105ms/step - loss: 0.0716 - acc: 0.9043 - val_loss: 0.0731 - val_acc: 0.9000\n",
            "Epoch 68/100\n",
            "25/25 [==============================] - 3s 105ms/step - loss: 0.0715 - acc: 0.9045 - val_loss: 0.0725 - val_acc: 0.9011\n",
            "Epoch 69/100\n",
            "25/25 [==============================] - 3s 104ms/step - loss: 0.0715 - acc: 0.9042 - val_loss: 0.0729 - val_acc: 0.8997\n",
            "Epoch 70/100\n",
            "25/25 [==============================] - 3s 104ms/step - loss: 0.0717 - acc: 0.9042 - val_loss: 0.0725 - val_acc: 0.9010\n",
            "Epoch 71/100\n",
            "25/25 [==============================] - 3s 105ms/step - loss: 0.0716 - acc: 0.9043 - val_loss: 0.0728 - val_acc: 0.9013\n",
            "Epoch 72/100\n",
            "25/25 [==============================] - 3s 107ms/step - loss: 0.0715 - acc: 0.9045 - val_loss: 0.0733 - val_acc: 0.8996\n",
            "Epoch 73/100\n",
            "25/25 [==============================] - 3s 104ms/step - loss: 0.0715 - acc: 0.9043 - val_loss: 0.0724 - val_acc: 0.9019\n",
            "Epoch 74/100\n",
            "25/25 [==============================] - 3s 104ms/step - loss: 0.0714 - acc: 0.9044 - val_loss: 0.0727 - val_acc: 0.9021\n",
            "Epoch 75/100\n",
            "25/25 [==============================] - 3s 105ms/step - loss: 0.0714 - acc: 0.9043 - val_loss: 0.0734 - val_acc: 0.8996\n",
            "Epoch 76/100\n",
            "25/25 [==============================] - 3s 106ms/step - loss: 0.0714 - acc: 0.9046 - val_loss: 0.0733 - val_acc: 0.8987\n",
            "Epoch 77/100\n",
            "25/25 [==============================] - 3s 104ms/step - loss: 0.0714 - acc: 0.9046 - val_loss: 0.0729 - val_acc: 0.8996\n",
            "Epoch 78/100\n",
            "25/25 [==============================] - 3s 105ms/step - loss: 0.0714 - acc: 0.9043 - val_loss: 0.0724 - val_acc: 0.9012\n",
            "Epoch 79/100\n",
            "25/25 [==============================] - 3s 105ms/step - loss: 0.0714 - acc: 0.9045 - val_loss: 0.0726 - val_acc: 0.9010\n",
            "Epoch 80/100\n",
            "25/25 [==============================] - 3s 106ms/step - loss: 0.0714 - acc: 0.9044 - val_loss: 0.0727 - val_acc: 0.9006\n",
            "Epoch 81/100\n",
            "25/25 [==============================] - 3s 105ms/step - loss: 0.0714 - acc: 0.9042 - val_loss: 0.0733 - val_acc: 0.9000\n",
            "Epoch 82/100\n",
            "25/25 [==============================] - 3s 105ms/step - loss: 0.0713 - acc: 0.9046 - val_loss: 0.0726 - val_acc: 0.9008\n",
            "Epoch 83/100\n",
            "25/25 [==============================] - 3s 105ms/step - loss: 0.0714 - acc: 0.9045 - val_loss: 0.0733 - val_acc: 0.9001\n",
            "Epoch 84/100\n",
            "25/25 [==============================] - 3s 105ms/step - loss: 0.0713 - acc: 0.9045 - val_loss: 0.0727 - val_acc: 0.9007\n",
            "Epoch 85/100\n",
            "25/25 [==============================] - 3s 105ms/step - loss: 0.0712 - acc: 0.9048 - val_loss: 0.0730 - val_acc: 0.9001\n",
            "Epoch 86/100\n",
            "25/25 [==============================] - 3s 105ms/step - loss: 0.0713 - acc: 0.9045 - val_loss: 0.0726 - val_acc: 0.9018\n",
            "Epoch 87/100\n",
            "25/25 [==============================] - 3s 106ms/step - loss: 0.0713 - acc: 0.9048 - val_loss: 0.0730 - val_acc: 0.9005\n",
            "Epoch 88/100\n",
            "25/25 [==============================] - 3s 107ms/step - loss: 0.0711 - acc: 0.9049 - val_loss: 0.0729 - val_acc: 0.9007\n",
            "Epoch 89/100\n",
            "25/25 [==============================] - 3s 106ms/step - loss: 0.0712 - acc: 0.9048 - val_loss: 0.0728 - val_acc: 0.9014\n",
            "Epoch 90/100\n",
            "25/25 [==============================] - 3s 104ms/step - loss: 0.0711 - acc: 0.9051 - val_loss: 0.0730 - val_acc: 0.9007\n",
            "Epoch 91/100\n",
            "25/25 [==============================] - 3s 105ms/step - loss: 0.0714 - acc: 0.9046 - val_loss: 0.0728 - val_acc: 0.9016\n",
            "Epoch 92/100\n",
            "25/25 [==============================] - 3s 114ms/step - loss: 0.0713 - acc: 0.9047 - val_loss: 0.0730 - val_acc: 0.9012\n",
            "Epoch 93/100\n",
            "25/25 [==============================] - 3s 119ms/step - loss: 0.0710 - acc: 0.9049 - val_loss: 0.0726 - val_acc: 0.9024\n",
            "Epoch 94/100\n",
            "25/25 [==============================] - 3s 119ms/step - loss: 0.0712 - acc: 0.9047 - val_loss: 0.0726 - val_acc: 0.9021\n",
            "Epoch 95/100\n",
            "25/25 [==============================] - 3s 117ms/step - loss: 0.0712 - acc: 0.9048 - val_loss: 0.0726 - val_acc: 0.9021\n",
            "Epoch 96/100\n",
            "25/25 [==============================] - 3s 105ms/step - loss: 0.0710 - acc: 0.9050 - val_loss: 0.0730 - val_acc: 0.9013\n",
            "Epoch 97/100\n",
            "25/25 [==============================] - 3s 105ms/step - loss: 0.0709 - acc: 0.9052 - val_loss: 0.0729 - val_acc: 0.9014\n",
            "Epoch 98/100\n",
            "25/25 [==============================] - 3s 104ms/step - loss: 0.0711 - acc: 0.9048 - val_loss: 0.0734 - val_acc: 0.9007\n",
            "Epoch 99/100\n",
            "25/25 [==============================] - 3s 104ms/step - loss: 0.0710 - acc: 0.9050 - val_loss: 0.0727 - val_acc: 0.9017\n",
            "Epoch 100/100\n",
            "25/25 [==============================] - 3s 105ms/step - loss: 0.0711 - acc: 0.9048 - val_loss: 0.0727 - val_acc: 0.9022\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "WlGIAKFA8o01",
        "colab_type": "code",
        "outputId": "6ecde52c-7204-4744-ba24-39194ffd030d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "h.history.keys()\n",
        "\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "dict_keys(['loss', 'acc', 'val_loss', 'val_acc'])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 11
        }
      ]
    },
    {
      "metadata": {
        "id": "AJJnW7oo8o4n",
        "colab_type": "code",
        "outputId": "e9a4d04e-2058-4f2d-ee64-98fca61ddae7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        }
      },
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "plt.plot(h.history['acc'])\n",
        "plt.plot(h.history['val_acc'])\n",
        "\n",
        "\n",
        "plt.title('model accuracy')\n",
        "plt.ylabel('accuracy')\n",
        "plt.xlabel('epoch')\n",
        "plt.legend(['training', 'validation'], loc='best')\n",
        "plt.show()\n",
        "\n",
        "    \n",
        " "
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "metadata": {
        "id": "LsHTHynBHnPX",
        "colab_type": "code",
        "outputId": "7e13b01f-cb12-49d8-d537-f15a6a826919",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        }
      },
      "cell_type": "code",
      "source": [
        "plt.plot(h.history['loss'])\n",
        "plt.plot(h.history['val_loss'])\n",
        "plt.title('model loss')\n",
        "plt.ylabel('loss')\n",
        "plt.xlabel('epoch')\n",
        "plt.legend(['training', 'validation'], loc='best')\n",
        "plt.show()\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nImMAAAAASUVORK5CYII=\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "metadata": {
        "id": "mq9A4bHJHkQr",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "### Create Storage"
      ]
    },
    {
      "metadata": {
        "id": "QEOTrJtMHk4-",
        "colab_type": "code",
        "outputId": "a05dd666-a8e4-47a0-9ff2-a73484684b3b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        }
      },
      "cell_type": "code",
      "source": [
        "PROJECT_ID = \"my-project-ml-wine\" #@param {type:\"string\"}\n",
        "\n",
        "# This must absolutely be a GLOBALLY UNIQUE name\n",
        "BUCKET_NAME = \"winepredictionengine\" #@param {type:\"string\"}\n",
        "REGION = \"us-central1\" #@param {type:\"string\"}\n",
        "\n",
        "! gcloud config set project $PROJECT_ID\n",
        "! echo $PROJECT_ID"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Updated property [core/project].\n",
            "my-project-ml-wine\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "0y-SjCPfH1B_",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "### Authenticate on Google Cloud Platform\n",
        "* Click on link and enter secret key"
      ]
    },
    {
      "metadata": {
        "id": "RW3JsOW8Hz1Z",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "import sys\n",
        "\n",
        "if 'google.colab' in sys.modules:\n",
        "  from google.colab import auth as google_auth\n",
        "  google_auth.authenticate_user()\n",
        "else:\n",
        "  %env GOOGLE_APPLICATION_CREDENTIALS ''"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "g7eISVjCHylz",
        "colab_type": "code",
        "outputId": "c033f2df-ab82-49b3-a49a-7583b9976509",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 85
        }
      },
      "cell_type": "code",
      "source": [
        "# Create Bucket\n",
        "!gsutil mb -p $PROJECT_ID -l $REGION gs://$BUCKET_NAME\n",
        "# Display what is in the bucket\n",
        "print('Bucket Content:')\n",
        "!gsutil ls -al gs://$BUCKET_NAME"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Creating gs://winepredictionengine/...\n",
            "ServiceException: 409 Bucket winepredictionengine already exists.\n",
            "Bucket Content:\n",
            "                                 gs://winepredictionengine/mcgilldemo/\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "A3wD3FPfnkbt",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "CeE9tLq9H9Ex",
        "colab_type": "code",
        "outputId": "862ce5cd-9032-4ecb-b046-25573bc7523a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "JOB_DIR = 'gs://' + BUCKET_NAME + '/mcgilldemo'\n",
        "print(JOB_DIR)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "gs://winepredictionengine/mcgilldemo\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "Amk9dnhGIQRA",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "[link text](https://)### Export Model to Google Cloud Storage"
      ]
    },
    {
      "metadata": {
        "id": "cC2nJWD_ITdE",
        "colab_type": "code",
        "outputId": "29398fc2-320a-40df-cf94-69197df776e6",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 479
        }
      },
      "cell_type": "code",
      "source": [
        "export_path = tf.contrib.saved_model.save_keras_model(model, JOB_DIR + '/keras_export')\n",
        "print(\"Model exported to: \", export_path)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "\n",
            "WARNING: The TensorFlow contrib module will not be included in TensorFlow 2.0.\n",
            "For more information, please see:\n",
            "  * https://github.com/tensorflow/community/blob/master/rfcs/20180907-contrib-sunset.md\n",
            "  * https://github.com/tensorflow/addons\n",
            "If you depend on functionality not listed there, please file an issue.\n",
            "\n",
            "WARNING:tensorflow:This model was compiled with a Keras optimizer (<tensorflow.python.keras.optimizers.RMSprop object at 0x7fe413d1f588>) but is being saved in TensorFlow format with `save_weights`. The model's weights will be saved, but unlike with TensorFlow optimizers in the TensorFlow format the optimizer's state will not be saved.\n",
            "\n",
            "Consider using a TensorFlow optimizer from `tf.train`.\n",
            "WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/network.py:1436: update_checkpoint_state (from tensorflow.python.training.checkpoint_management) is deprecated and will be removed in a future version.\n",
            "Instructions for updating:\n",
            "Use tf.train.CheckpointManager to manage checkpoints rather than manually editing the Checkpoint proto.\n",
            "WARNING:tensorflow:Model was compiled with an optimizer, but the optimizer is not from `tf.train` (e.g. `tf.train.AdagradOptimizer`). Only the serving graph was exported. The train and evaluate graphs were not added to the SavedModel.\n",
            "WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/python/saved_model/signature_def_utils_impl.py:205: build_tensor_info (from tensorflow.python.saved_model.utils_impl) is deprecated and will be removed in a future version.\n",
            "Instructions for updating:\n",
            "This function will only be available through the v1 compatibility library as tf.compat.v1.saved_model.utils.build_tensor_info or tf.compat.v1.saved_model.build_tensor_info.\n",
            "INFO:tensorflow:Signatures INCLUDED in export for Classify: None\n",
            "INFO:tensorflow:Signatures INCLUDED in export for Regress: None\n",
            "INFO:tensorflow:Signatures INCLUDED in export for Predict: ['serving_default']\n",
            "INFO:tensorflow:Signatures INCLUDED in export for Train: None\n",
            "INFO:tensorflow:Signatures INCLUDED in export for Eval: None\n",
            "INFO:tensorflow:No assets to save.\n",
            "INFO:tensorflow:No assets to write.\n",
            "INFO:tensorflow:SavedModel written to: gs://winepredictionengine/mcgilldemo/keras_export/1556335234/saved_model.pb\n",
            "Model exported to:  b'gs://winepredictionengine/mcgilldemo/keras_export/1556335234'\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "aUCv7VEPIgQF",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "### Deploy Model from GCS"
      ]
    },
    {
      "metadata": {
        "id": "juC8akMaIWE6",
        "colab_type": "code",
        "outputId": "e93de29b-9e8a-413e-9404-b95d3f652ea5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 122
        }
      },
      "cell_type": "code",
      "source": [
        "# Create model\n",
        "MODEL_NAME = \"my_first_keras_model\"\n",
        "\n",
        "! gcloud ml-engine models create $MODEL_NAME \\\n",
        "  --regions $REGION"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "\u001b[1;31mERROR:\u001b[0m (gcloud.ml-engine.models.create) Resource in project [my-project-ml-wine] is the subject of a conflict: Field: model.name Error: A model with the same name already exists.\n",
            "- '@type': type.googleapis.com/google.rpc.BadRequest\n",
            "  fieldViolations:\n",
            "  - description: A model with the same name already exists.\n",
            "    field: model.name\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "9echCBV5NDhK",
        "colab_type": "code",
        "outputId": "7282ed69-4e35-4e96-cba2-7be338e32c24",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 102
        }
      },
      "cell_type": "code",
      "source": [
        "# Deploy model\n",
        "MODEL_VERSION = \"v1\"\n",
        "\n",
        "# Get a list of directories in the `keras_export` parent directory\n",
        "KERAS_EXPORT_DIRS = ! gsutil ls $JOB_DIR/keras_export/\n",
        "\n",
        "# Pick the directory with the latest timestamp, in case you've trained\n",
        "# multiple times\n",
        "SAVED_MODEL_PATH = KERAS_EXPORT_DIRS[-1]\n",
        "\n",
        "# Create model version based on that SavedModel directory\n",
        "! gcloud ml-engine versions create $MODEL_VERSION \\\n",
        "  --model $MODEL_NAME \\\n",
        "  --runtime-version 1.13 \\\n",
        "  --python-version 3.5 \\\n",
        "  --framework tensorflow \\\n",
        "  --origin $SAVED_MODEL_PATH"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "\u001b[1;31mERROR:\u001b[0m (gcloud.ml-engine.versions.create) ALREADY_EXISTS: Field: version.name Error: A version with the same name already exists.\n",
            "- '@type': type.googleapis.com/google.rpc.BadRequest\n",
            "  fieldViolations:\n",
            "  - description: A version with the same name already exists.\n",
            "    field: version.name\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "OFQLJMcKInQ8",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "### Test your model with your test set"
      ]
    },
    {
      "metadata": {
        "id": "I7j2UKY6IyCL",
        "colab_type": "code",
        "outputId": "c0487f71-80be-453b-bc36-401d99d1d103",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 207
        }
      },
      "cell_type": "code",
      "source": [
        "# Create file with features to send to model\n",
        "with open('test.json', 'w') as f:\n",
        "  for item in X_test[:10]:\n",
        "    item = list(item)\n",
        "    f.write(\"%s\\n\" % item)\n",
        "! cat test.json"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[0.2816901408450705, 0.09292575614475596, 0.4, 0.27837195484254307, 0.05714285714285715, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0]\n",
            "[0.1971830985915493, 0.05530856234594919, 0.06666666666666668, 0.032679738562091505, 0.14285714285714285, 0.11228070175438597, 0.13157894736842105, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0]\n",
            "[0.15492957746478875, 0.050747506392389036, 0.4666666666666667, 0.020499108734402853, 0.05714285714285715, 0.4233918128654971, 0.05263157894736842, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0]\n",
            "[0.3943661971830986, 0.0749809956001935, 0.3666666666666667, 0.043969102792632206, 0.05714285714285715, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0]\n",
            "[0.07042253521126762, 0.05095482711755086, 0.4666666666666667, 0.059714795008912656, 0.05714285714285715, 0.21871345029239767, 0.05263157894736842, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]\n",
            "[0.05633802816901412, 0.12100619658611873, 0.6, 0.15715983363042188, 0.0, 0.2128654970760234, 0.10526315789473684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]\n",
            "[0.47887323943661975, 0.04745341042592892, 0.43333333333333335, 0.05852644087938206, 0.05714285714285715, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0]\n",
            "[0.16901408450704225, 0.0594549768491857, 0.9, 0.017825311942959002, 0.02857142857142857, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0]\n",
            "[0.1830985915492958, 0.05839533758724748, 0.6, 0.30362448009506837, 0.08571428571428572, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0]\n",
            "[0.22535211267605637, 0.03386238510976481, 0.8666666666666667, 0.09061200237670826, 0.02857142857142857, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "2UM71gCuNfe3",
        "colab_type": "code",
        "outputId": "2b4ba825-bac3-47bf-cacb-83aa5ee4f8dc",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        }
      },
      "cell_type": "code",
      "source": [
        "# Send file to model for prediction\n",
        "! gcloud ml-engine predict \\\n",
        "  --model $MODEL_NAME \\\n",
        "  --version $MODEL_VERSION \\\n",
        "  --json-instances test.json"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "DENSE_1\n",
            "[0.3036775588989258, 0.6963224411010742]\n",
            "[0.5605186820030212, 0.43948128819465637]\n",
            "[0.9989736080169678, 0.0010263631120324135]\n",
            "[0.9996339082717896, 0.00036604265915229917]\n",
            "[0.3111719489097595, 0.6888280510902405]\n",
            "[0.12935246527194977, 0.8706475496292114]\n",
            "[0.9919241070747375, 0.008075837977230549]\n",
            "[0.994612455368042, 0.005387597717344761]\n",
            "[0.6065729260444641, 0.3934271037578583]\n",
            "[0.9939919114112854, 0.006008073687553406]\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}